
options {
    LOOKAHEAD = 1;
    CHOICE_AMBIGUITY_CHECK = 2;
    OTHER_AMBIGUITY_CHECK = 1;
    STATIC = false;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    ERROR_REPORTING = true;
    JAVA_UNICODE_ESCAPE = false;
    UNICODE_INPUT = false;
    IGNORE_CASE = false;
    USER_TOKEN_MANAGER = false;
    USER_CHAR_STREAM = false;
    BUILD_PARSER = true;
    BUILD_TOKEN_MANAGER = true;
    SANITY_CHECK = true;
    FORCE_LA_CHECK = false;
}

PARSER_BEGIN(AstParser)
package org.poormanscastle.studies.compilers.grammar.grammar3_1.astparser.javacc;

import org.poormanscastle.studies.compilers.grammar.grammar3_1.astparser.ast.*;

public class AstParser{
    public static void main(String[] args) throws ParseException{
        AstParser parser = new AstParser(System.in);
        parser.P();
    }
}
PARSER_END(AstParser)

/* language commandos */
TOKEN : {
    < PRINT : "print" >
}

/* Operators */
TOKEN : {
    < PLUS : "+" > |
    < MINUS : "-" > |
    < TIMES : "*" > |
    < DIV : "/" > |
    < ASSIGN : ":=" >
}

/* Separators */
TOKEN : {
    < LPAREN : "(" > |
    < RPAREN : ")" > |
    < COMMA : "," > |
    < SEMICOLON : ";" >
}

/* variable strings */
TOKEN : {
    < ID : [ "_", "a"-"z", "A"-"Z"](["_", "a"-"z", "A"-"Z"])* > |
    < NUM : (["1"-"9"])(["0"-"9"])* >
}

/* Whitespace */
SKIP : {
    " " |
    "\n" |
    "\r" |
    "\t"
}

Statement P() :
{ Statement statement; StatementList statementList; }
{
    statement = S() statementList = PPrime()
    {
        return new StatementList(statement.getCodePosition(), statement, statementList);
    }
    <EOF>
}

StatementList PPrime() :
{ StatementList statementList; }
{
    <SEMICOLON> statementList = X() { return statementList; }
}

StatementList X() :
{ StatementList statementList; Statement statement; }
{
    (
        statement = S() statementList = PPrime()
        {
            return new StatementList(statement.getCodePosition(), statement, statementList);
        }
    )?
    { return null; }
}

Statement S() :
{ Token token; Expression expression; ExpressionList expressionList; }
{
    token = <ID> <ASSIGN> expression = E()
    {
        return new AssignmentStatement(new CodePosition(token), token.image, expression);
    }
    |
    token = <PRINT> <LPAREN> expressionList = L() <RPAREN>
    {
        return new PrintStatement(new CodePosition(token), expressionList);
    }
}

ExpressionList L() :
{ Expression expression; ExpressionList expressionList; }
{
    expression = E() expressionList = LPrime()
    {
        if (expressionList != null){
            return new PairExpressionList(expression.getCodePosition(), expression, expressionList);
        } else {
            return new LastExpressionList(expression.getCodePosition(), expression);
        }
    }
}

ExpressionList LPrime() :
{ Token token; Expression expression; ExpressionList expressionList; }
{
    (
        token = <COMMA> expression = E() expressionList = LPrime()
        {
            if (expressionList != null){
                return new PairExpressionList(new CodePosition(token), expression, expressionList);
            } else {
                return new LastExpressionList(new CodePosition(token), expression);
            }
        }
    )?
    { return null; }
}

Expression E() :
{ Token token; Expression leftOperand; Expression rightOperand; Statement statement; }
{
    leftOperand = T() rightOperand = EPrime(leftOperand)
    {
        return rightOperand != null ? rightOperand : leftOperand;
    }
    |
    token = <LPAREN> statement = S() <COMMA> leftOperand = E() <RPAREN>
    {
        return new EseqExpression(new CodePosition(token), statement, leftOperand);
    }
}

Expression EPrime(Expression leftOperand) :
{ Expression rightOperand; Expression ePrimeExpression; }
{
    (
        <PLUS> rightOperand = T() ePrimeExpression = EPrime(rightOperand)
        {
            return new OperatorExpression(leftOperand.getCodePosition(), leftOperand, Operator.PLUS,
                ePrimeExpression != null ? ePrimeExpression : rightOperand );
        }
        |
        <MINUS> rightOperand = T() ePrimeExpression = EPrime(rightOperand)
        {
            return new OperatorExpression(leftOperand.getCodePosition(), leftOperand, Operator.MINUS,
                ePrimeExpression != null ? ePrimeExpression : rightOperand );
        }
    )?
    { return null; }
}

Expression T() :
{ Expression leftOperand; Expression rightOperand; Expression operatorExpression; }
{
    leftOperand = F() rightOperand = TPrime(leftOperand)
    {
        return rightOperand == null ? leftOperand : rightOperand;
    }
}

Expression TPrime(Expression leftOperand) :
{ Expression rightOperand; Expression tPrimeExpression; Token operatorToken; }
{
    (
        operatorToken = <TIMES> rightOperand = F() tPrimeExpression = TPrime(rightOperand)
        {
            return new OperatorExpression(leftOperand.getCodePosition(), leftOperand, Operator.TIMES,
                tPrimeExpression != null ? tPrimeExpression : rightOperand );
        }
        |
        <DIV> rightOperand = F() tPrimeExpression = TPrime(rightOperand)
        {
            return new OperatorExpression(leftOperand.getCodePosition(), leftOperand, Operator.DIV,
                tPrimeExpression != null ? tPrimeExpression : rightOperand );
        }
    )?
    { return null; }
}

Expression F() :
{ Token token; }
{
    token = <NUM> { return new NumExpression(new CodePosition(token), Integer.parseInt(token.image)); }
    |
    token = <ID> { return new IdExpression(new CodePosition(token), token.image); }
}







