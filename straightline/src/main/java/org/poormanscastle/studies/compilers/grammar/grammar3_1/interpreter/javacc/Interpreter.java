/* Interpreter.java */
/* Generated By:JavaCC: Do not edit this line. Interpreter.java */
package org.poormanscastle.studies.compilers.grammar.grammar3_1.interpreter.javacc;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

public class Interpreter implements InterpreterConstants {

    private Map<String,Integer> memoryTable = new HashMap<String,Integer>();

    public static void main(String[] args) throws ParseException{
        Interpreter interpreter = new Interpreter(System.in);
        interpreter.Program();
    }

  final public void Program() throws ParseException {
    S();
    PPrime();
    jj_consume_token(0);
  }

  final public void S() throws ParseException {Token t; Integer value; List<Integer> valueList = new LinkedList<Integer>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      t = jj_consume_token(ID);
      jj_consume_token(ASSIGN);
      value = E();
memoryTable.put(t.image, value);
      break;
      }
    case PRINT:{
      jj_consume_token(PRINT);
      jj_consume_token(LPAREN);
      L(valueList);
for(Integer integer : valueList){
                System.out.print(String.valueOf(integer) + " ");
            }
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void L(List<Integer> valueList) throws ParseException {Integer value;
    value = E();
valueList.add(value);
    LPrime(valueList);
  }

  final public void LPrime(List<Integer> valueList) throws ParseException {Integer value;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      value = E();
valueList.add(value);
      LPrime(valueList);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  final public void PPrime() throws ParseException {
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRINT:
    case ID:{
      S();
      PPrime();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  final public Integer E() throws ParseException {Integer term; Integer result;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:
    case NUM:{
      term = T();
      result = EPrime(term);
{if ("" != null) return result != null ? result : term;}
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      S();
      jj_consume_token(COMMA);
      result = E();
      jj_consume_token(RPAREN);
{if ("" != null) return result;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Integer EPrime(Integer input) throws ParseException {Integer term; Integer result;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case DASH:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        term = T();
term += input;
        result = EPrime(term);
{if ("" != null) return result != null ? result : term;}
        break;
        }
      case DASH:{
        jj_consume_token(DASH);
        term = T();
term = input - term;
        result = EPrime(term);
{if ("" != null) return result != null ? result : term;}
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Integer T() throws ParseException {Integer factor; Integer result;
    factor = F();
    result = TPrime(factor);
{if ("" != null) return result != null ? result : factor;}
    throw new Error("Missing return statement in function");
  }

  final public Integer TPrime(Integer input) throws ParseException {Integer factor; Integer result;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STAR:
    case SLASH:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        jj_consume_token(STAR);
        factor = F();
factor *= input;
        result = TPrime(factor);
{if ("" != null) return result != null ? result : factor;}
        break;
        }
      case SLASH:{
        jj_consume_token(SLASH);
        factor = F();
factor = input / factor;
        result = TPrime(factor);
{if ("" != null) return result != null ? result : factor;}
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Integer F() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      t = jj_consume_token(NUM);
{if ("" != null) return new Integer(Integer.parseInt(t.image));}
      break;
      }
    case ID:{
      t = jj_consume_token(ID);
{if ("" != null) return memoryTable.get(t.image);}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public InterpreterTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x802,0x200,0x802,0x1880,0xc,0xc,0x30,0x30,0x1800,};
   }

  /** Constructor with InputStream. */
  public Interpreter(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Interpreter(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new InterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Interpreter(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new InterpreterTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Interpreter(InterpreterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(InterpreterTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[17];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 17; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
