
options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(MiniJava)
package org.poormanscastle.studies.compilers.grammar.minijava.javacc;
public class MiniJava{
    public static void main(String[] args) throws ParseException{
        MiniJava miniJava = new MiniJava(System.in);
        miniJava.Program();
    }
}
PARSER_END(MiniJava)

/* reserved words and literals */
TOKEN : {
    < CLASS : "class" > |
    < PUBLIC : "public" > |
    < PRIVATE : "private" > |
    < STATIC : "static" > |
    < VOID : "void" >
}

/* Type Names */
TOKEN : {
   < STRING : "String" >
}

/* Separators */
TOKEN : {
    < LBRACE : "{" > |
    < RBRACE : "}" > |
    < LPAREN : "(" > |
    < RPAREN : ")" > |
    < LBRACKET : "[" > |
    < RBRACKET : "]" > |
    < SEMICOLON : ";" > |
    < COMMA : "," > |
    < DOT : "." >
}

/* Operators */
TOKEN : {
    < LT : "<" > |
    < GT : ">" > |
    < COLON : ":" > |
    < DECIMAL : (["0"-"9"])+(["0"-"9"])* > |
    < EQ : "=" > |
    < STAR : "*" > |
    < DASH : "-" > |
    < ID : ["_", "a"-"z", "A"-"Z"](["_", "a"-"z", "A"-"Z"])* > |
    < COMMENT : "//"(~["\n", "\r"])*("\r" | "\n" | "\r\n") >
}

/* Strange stuff I need to ponder about, but seem to directly result from the MiniJava Language specification */
TOKEN : {
    < MAIN : "main" >
}

SKIP : {
    " " |
    "\n" |
    "\r" |
    "\t"
}

void Program() :
{}
{
   MainClass() (ClassDecl())* <EOF>
}

void MainClass() :
{}
{
    <CLASS> <ID> <LBRACE> <PUBLIC> <STATIC> <VOID> <MAIN> <LPAREN> <STRING> <LBRACKET> <RBRACKET> <ID> <RPAREN>
    Block()
}

void Block() :
{}
{
    <LBRACE> ( BlockStatement() )* <RBRACE>
}

void BlockStatement() :
{}
{
    LocalVariableDeclaration() <SEMICOLON> |
    Statement()
}

void LocalVariableDeclaration() :
{}
{
    /* Type id = Exp */
    <ID> <ID> [ <EQ> Expression()]
}

void Statement() :
{}
{
    Block() |
    EmptyStatement() |
    "System.out.println("<ID>");"
}

void EmptyStatement() :
{}
{
    <SEMICOLON>
}

void ClassDecl() :
{}
{
    <CLASS> <ID>
    <LBRACE>

    <RBRACE>
}
