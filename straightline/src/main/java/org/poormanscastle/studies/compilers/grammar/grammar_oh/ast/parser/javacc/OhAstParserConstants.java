/* Generated By:JavaCC: Do not edit this line. OhAstParserConstants.java */
package org.poormanscastle.studies.compilers.grammar.grammar_oh.ast.parser.javacc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface OhAstParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PRINT = 1;
  /** RegularExpression Id. */
  int AND = 2;
  /** RegularExpression Id. */
  int BOOL = 3;
  /** RegularExpression Id. */
  int DIV = 4;
  /** RegularExpression Id. */
  int ELSE = 5;
  /** RegularExpression Id. */
  int EQ = 6;
  /** RegularExpression Id. */
  int FOR = 7;
  /** RegularExpression Id. */
  int FUNCTION = 8;
  /** RegularExpression Id. */
  int GT = 9;
  /** RegularExpression Id. */
  int GTE = 10;
  /** RegularExpression Id. */
  int IF = 11;
  /** RegularExpression Id. */
  int LET = 12;
  /** RegularExpression Id. */
  int LPAREN = 13;
  /** RegularExpression Id. */
  int LT = 14;
  /** RegularExpression Id. */
  int LTE = 15;
  /** RegularExpression Id. */
  int NEQ = 16;
  /** RegularExpression Id. */
  int NOT = 17;
  /** RegularExpression Id. */
  int MINUS = 18;
  /** RegularExpression Id. */
  int OR = 19;
  /** RegularExpression Id. */
  int PLUS = 20;
  /** RegularExpression Id. */
  int RETURN = 21;
  /** RegularExpression Id. */
  int RPAREN = 22;
  /** RegularExpression Id. */
  int TIMES = 23;
  /** RegularExpression Id. */
  int TYPE = 24;
  /** RegularExpression Id. */
  int XOR = 25;
  /** RegularExpression Id. */
  int WHILE = 26;
  /** RegularExpression Id. */
  int COMMA = 27;
  /** RegularExpression Id. */
  int SEMICOLON = 28;
  /** RegularExpression Id. */
  int LBRACE = 29;
  /** RegularExpression Id. */
  int RBRACE = 30;
  /** RegularExpression Id. */
  int NUM = 31;
  /** RegularExpression Id. */
  int DEC = 32;
  /** RegularExpression Id. */
  int TEXT = 33;
  /** RegularExpression Id. */
  int ID = 34;
  /** RegularExpression Id. */
  int END_OF_SINGLE_LINE_COMMENT = 36;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT_MODE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"print\"",
    "\"&\"",
    "<BOOL>",
    "\"/\"",
    "\"else\"",
    "\"==\"",
    "\"for\"",
    "\"function\"",
    "\">\"",
    "\">=\"",
    "\"if\"",
    "\"=\"",
    "\"(\"",
    "\"<\"",
    "\"<=\"",
    "\"!=\"",
    "\"!\"",
    "\"-\"",
    "\"|\"",
    "\"+\"",
    "\"return\"",
    "\")\"",
    "\"*\"",
    "<TYPE>",
    "\"^\"",
    "\"while\"",
    "\",\"",
    "\";\"",
    "\"{\"",
    "\"}\"",
    "<NUM>",
    "<DEC>",
    "<TEXT>",
    "<ID>",
    "\"//\"",
    "<END_OF_SINGLE_LINE_COMMENT>",
    "<token of kind 37>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
  };

}
