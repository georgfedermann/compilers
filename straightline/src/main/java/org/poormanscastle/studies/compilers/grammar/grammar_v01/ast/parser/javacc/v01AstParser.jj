
options{
    LOOKAHEAD = 1;
    BUILD_PARSER = true;
    BUILD_TOKEN_MANAGER = true;
    CHOICE_AMBIGUITY_CHECK = 2;
    DEBUG_LOOKAHEAD = false;
    DEBUG_PARSER = false;
    DEBUG_TOKEN_MANAGER = false;
    ERROR_REPORTING = true;
    FORCE_LA_CHECK = false;
    IGNORE_CASE = false;
    JAVA_UNICODE_ESCAPE = false;
    OTHER_AMBIGUITY_CHECK = 1;
    SANITY_CHECK = true;
    STATIC = false; /* changed */
    UNICODE_INPUT = false;
    USER_CHAR_STREAM = false;
    USER_TOKEN_MANAGER = false;
}

PARSER_BEGIN(V01AstParser)
package org.poormanscastle.studies.compilers.grammar.grammar_v01.ast.parser.javacc;

import org.poormanscastle.studies.compilers.grammar.grammar_v01.ast.domain.*;
import org.poormanscastle.studies.compilers.utils.grammartools.ast.CodePosition;

public class V01AstParser{
    public static void main(String[] args) throws ParseException{
        V01AstParser parser = new V01AstParser(System.in);
        parser.P();
    }
}
PARSER_END(V01AstParser)

/* Lexer */
/* Language Commandos */
TOKEN : {
    < PRINT : "print" >
}

/* Operators */
TOKEN : {
    < LPAREN : "(" > |
    < RPAREN : ")" > |
    < NOT : "!" > |
    < TIMES : "*" > |
    < DIV : "/" > |
    < PLUS : "+" > |
    < MINUS : "-" > |
    < LT : "<" > |
    < LTE : "<=" > |
    < GT : ">" > |
    < GTE : ">=" > |
    < EQ : "==" > |
    < NEQ : "!=" > |
    < XOR : "^" > |
    < AND : "&" > |
    < OR : "|" > |
    < LET : "=" > |
    < TYPE : "int" | "double" | "boolean" | "text" > |
    < BOOL : "true" | "false" >
}

/* Separators */
TOKEN : {
    < COMMA : "," > |
    < SEMICOLON : ";" >
}

/* literals: string, integers and floats */
TOKEN : {
    < NUM : (["0"-"9"])+ > |
    < DEC : (["0"-"9"])+("."(["0"-"9"])+)? | ("."(["0"-"9"])+) > |
    < TEXT : "\""(["A"-"Z", "a"-"z", "0"-"9", ",", ";", ".", "!", " "])*"\"" >
}

/* IDs: variable names, function names */
TOKEN : {
    < ID : [ "_", "a"-"z", "A"-"Z"](["_", "a"-"z", "A"-"Z", "0"-"9"])* >
}

/* comments: one line comments. realized using lexical states and MORE tokens
   to avoid very complex regular expressions. // shift the lexer in
   single-line-comment-mode, from where it switches back into default mode on newline. */
MORE : {
    "//" : IN_SINGLE_LINE_COMMENT_MODE
}

/*  special tokens will not be delivered to the parser, but will be available
    on the next available token in its specialToken field. When a newline is found,
    switch back into DEFAULT mode. */
< IN_SINGLE_LINE_COMMENT_MODE > SPECIAL_TOKEN : {
    < END_OF_SINGLE_LINE_COMMENT : "\n" | "\r" | "\r\n" > : DEFAULT
}

< IN_SINGLE_LINE_COMMENT_MODE > MORE : {
    < ~[] >
}

SKIP : {
    " " |
    "\n" |
    "\r" |
    "\t"
}

Program P() :
{ Statement statement;
    StatementList statementList; }
{
    statement = S() statementList = PPrime()
    {
        return new ProgramImpl(statement.getCodePosition(), statementList == null ? statement :
            new PairStatementList(statement.getCodePosition(), statement, statementList));
    }
}

StatementList PPrime() :
{ StatementList statementList; }
{
    <SEMICOLON> statementList = PPrimePrime()
    {
        return statementList;
    }
}

StatementList PPrimePrime() :
{ Statement statement; StatementList statementList; }
{
    (
        statement = S() statementList = PPrime()
        {
            return statementList == null ?
                new LastStatementList(statement.getCodePosition(), statement) :
                new PairStatementList(statement.getCodePosition(), statement, statementList);
        }
    )?
    { return null; }
}

Statement S() :
{ Statement statement; }
{
    statement = DS()
    {
        return statement;
    }
    |
    statement = AS()
    {
        return statement;
    }
    |
    statement = PS()
    {
        return statement;
    }
}

Statement DS() :
{ Token typeToken, idToken; Expression expression; }
{
    typeToken = <TYPE> idToken = <ID> expression = DSPrime()
    {
        return expression == null ?
            new DeclarationStatement(CodePosition.createFromToken(typeToken), typeToken.image, idToken.image) :
            new DeclarationStatement(typeToken.image, idToken.image, expression);
    }
}

Expression DSPrime() :
{ Expression expression; }
{
    (
    <LET> expression = E()
    {
        return expression;
    }
    )?
    { return null; }
}

Statement AS() :
{ Statement statement; Token idToken; Expression expression; }
{
    idToken = <ID> <LET> expression = E()
    {
        return new AssignmentStatement(idToken.image, expression);
    }
}

Statement PS() :
{ ExpressionList expressionList; }
{
    <PRINT> <LPAREN> expressionList = EL() <RPAREN>
    {
        return new PrintStatement(expressionList);
    }
}

ExpressionList EL() :
{ Expression expression; ExpressionList expressionList; }
{
    expression = E() expressionList = ELPrime()
    {
        return expressionList == null ? new LastExpressionList(expression.getCodePosition(), expression) :
            new PairExpressionList(expression.getCodePosition(), expression, expressionList);
    }
}

ExpressionList ELPrime() :
{ Expression expression; ExpressionList expressionList; }
{
    (
    <COMMA> expression = E() expressionList = ELPrime()
    {
        return expressionList == null ? new LastExpressionList(expression.getCodePosition(), expression) :
            new PairExpressionList(expression, expressionList);
    }
    )?
    { return null; }
}

Expression E() :
{ Expression lhs, rhs; }
{
    lhs = T8() rhs = EPrime(lhs)
    {
        return rhs == null ? lhs : rhs;
    }
}

Expression EPrime(Expression lhs) :
{ Expression rhs; Expression ePrimeExpression; }
{
    (
        <OR> rhs = T8() ePrimeExpression = EPrime(rhs)
        {
            return new BinaryOperatorExpression(lhs, BinaryOperator.OR,
                ePrimeExpression != null ? ePrimeExpression : rhs );
        }
    )?
    { return null; }
}

Expression T8() :
{ Expression lhs, rhs;}
{
    lhs = T7() rhs = T8Prime(lhs)
    {return rhs == null ? lhs : rhs;}
}

Expression T8Prime(Expression lhs) :
{ Expression rhs, t8PrimeExpression; }
{
    (
        <AND> rhs = T7() t8PrimeExpression = T8Prime(rhs)
        {
            return new BinaryOperatorExpression(lhs, BinaryOperator.AND,
                t8PrimeExpression != null ? t8PrimeExpression : rhs );
        }
    )?
    { return null; }
}

Expression T7() :
{ Expression lhs, rhs; }
{
    lhs = T6() rhs = T7Prime(lhs)
    {
        return rhs != null ? rhs : lhs;
    }
}

Expression T7Prime(Expression lhs) :
{ Expression rhs, t7PrimeExpression; }
{
    (
        <XOR> rhs = T6() t7PrimeExpression = T7Prime(rhs)
        {
            return new BinaryOperatorExpression(lhs, BinaryOperator.XOR,
                t7PrimeExpression != null ? t7PrimeExpression : rhs );
        }
    )?
    { return null; }
}

Expression T6() :
{ Expression lhs, rhs; }
{
    lhs = T5() rhs = T6Prime(lhs)
    {
        return rhs != null ? rhs : lhs;
    }
}

Expression T6Prime(Expression lhs) :
{ Expression rhs, t6PrimeExpression; }
{
    (
        <EQ> rhs = T5() t6PrimeExpression = T6Prime(rhs)
        {
            return new BinaryOperatorExpression(lhs, BinaryOperator.EQ,
                t6PrimeExpression != null ? t6PrimeExpression : rhs );
        }
    )?
    { return null; }
}

Expression T5() :
{ Expression lhs, rhs; }
{
    lhs = T4() rhs = T5Prime(lhs)
    {
        return rhs != null ? rhs : lhs;
    }
}

Expression T5Prime(Expression lhs) :
{ Expression rhs, t5PrimeExpression; }
{
    (
        <LT> rhs = T4() t5PrimeExpression = T5Prime(rhs)
        {
            return new BinaryOperatorExpression(lhs, BinaryOperator.LT,
                t5PrimeExpression != null ? t5PrimeExpression : rhs );
        }
        |
        <LTE> rhs = T4() t5PrimeExpression = T5Prime(rhs)
        {
            return new BinaryOperatorExpression(lhs, BinaryOperator.LTE,
                t5PrimeExpression != null ? t5PrimeExpression : rhs );
        }
        |
        <GT> rhs = T4() t5PrimeExpression = T5Prime(rhs)
        {
            return new BinaryOperatorExpression(lhs, BinaryOperator.GT,
                t5PrimeExpression != null ? t5PrimeExpression : rhs );
        }
        |
        <GTE> rhs = T4() t5PrimeExpression = T5Prime(rhs)
        {
            return new BinaryOperatorExpression(lhs, BinaryOperator.GTE,
                t5PrimeExpression != null ? t5PrimeExpression : rhs );
        }
    )?
    { return null; }
}

Expression T4() :
{ Expression lhs, rhs; }
{
    lhs = T3() rhs = T4Prime(lhs)
    {
        return rhs != null ? rhs : lhs;
    }
}

Expression T4Prime(Expression lhs) :
{ Expression rhs, t4PrimeExpression; }
{
    (
        <PLUS> rhs = T3() t4PrimeExpression = T4Prime(rhs)
        {
            return new BinaryOperatorExpression(lhs, BinaryOperator.PLUS,
                t4PrimeExpression != null ? t4PrimeExpression : rhs );
        }
        |
        <MINUS> rhs = T3() t4PrimeExpression = T4Prime(rhs)
        {
            return new BinaryOperatorExpression(lhs, BinaryOperator.MINUS,
                t4PrimeExpression != null ? t4PrimeExpression : rhs );
        }
    )?
    { return null; }
}

Expression T3() :
{ Expression lhs, rhs; }
{
    lhs = T2() rhs = T3Prime(lhs)
    {
        return rhs != null ? rhs : lhs;
    }
}

Expression T3Prime(Expression lhs) :
{ Expression rhs, t3PrimeExpression; }
{
    (
        <TIMES> rhs = T2() t3PrimeExpression = T3Prime(rhs)
        {
               return new BinaryOperatorExpression(lhs, BinaryOperator.TIMES,
                t3PrimeExpression != null ? t3PrimeExpression : rhs );
        }
        |
        <DIV> rhs = T2() t3PrimeExpression = T3Prime(rhs)
        {
               return new BinaryOperatorExpression(lhs, BinaryOperator.DIV,
                t3PrimeExpression != null ? t3PrimeExpression : rhs );
        }
    )?
    { return null; }
}

Expression T2() :
{ Expression f; }
{
    (
        f = F()
    )
    {
        return f;
    }
    |
    (
        <NOT> f = F()
    )
    {
        return new UnaryOperatorExpression(UnaryOperator.NOT, f);
    }
}

Expression F() :
{ Token valueToken; Expression expression; }
{
    valueToken = <ID>
    {
        return new IdExpression(CodePosition.createFromToken(valueToken), valueToken.image);
    }
    |
    valueToken = <NUM>
    {
        return new NumExpression(CodePosition.createFromToken(valueToken), Integer.parseInt(valueToken.image));
    }
    |
    valueToken = <DEC>
    {
        return new DecimalExpression(CodePosition.createFromToken(valueToken), Double.parseDouble(valueToken.image));
    }
    |
    valueToken = <BOOL>
    {
        return new BooleanExpression(CodePosition.createFromToken(valueToken), Boolean.parseBoolean(valueToken.image));
    }
    |
    valueToken = <TEXT>
    {
        return new TextExpression(CodePosition.createFromToken(valueToken), valueToken.image);
    }
}
