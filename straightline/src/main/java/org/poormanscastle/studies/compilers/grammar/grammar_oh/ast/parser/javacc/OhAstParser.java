/* OhAstParser.java */
/* Generated By:JavaCC: Do not edit this line. OhAstParser.java */
package org.poormanscastle.studies.compilers.grammar.grammar_oh.ast.parser.javacc;

import org.poormanscastle.studies.compilers.grammar.grammar_oh.ast.domain.*;
import org.poormanscastle.studies.compilers.utils.grammartools.ast.CodePosition;

public class OhAstParser implements OhAstParserConstants {
    public static void main(String[] args) throws ParseException{
        OhAstParser parser = new OhAstParser(System.in);
        parser.P();
    }

  final public Program P() throws ParseException {StatementList statementList;
    statementList = PPrime();
    jj_consume_token(0);
{if ("" != null) return new ProgramImpl(statementList == null ? CodePosition.createZeroPosition() : statementList.getCodePosition(),
            statementList);}
    throw new Error("Missing return statement in function");
  }

  final public StatementList PPrime() throws ParseException {Statement statement; StatementList statementList;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRINT:
    case FOR:
    case FUNCTION:
    case IF:
    case RETURN:
    case TYPE:
    case WHILE:
    case LBRACE:
    case ID:{
      statement = S();
      jj_consume_token(SEMICOLON);
      statementList = PPrime();
{if ("" != null) return statementList == null ?
                new LastStatementList(statement) :
                new PairStatementList(statement, statementList);}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

/* TODO check this out: why does the conditional statement go missing in the generated parser if statement = CS()
 comes after statement = B() ? */
  final public Statement S() throws ParseException {Statement statement;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TYPE:{
      statement = DS();
{if ("" != null) return statement;}
      break;
      }
    case ID:{
      statement = AS();
{if ("" != null) return statement;}
      break;
      }
    case PRINT:{
      statement = PS();
{if ("" != null) return statement;}
      break;
      }
    case IF:{
      statement = CS();
{if ("" != null) return statement;}
      break;
      }
    case WHILE:{
      statement = WS();
{if ("" != null) return statement;}
      break;
      }
    case FOR:{
      statement = FS();
{if ("" != null) return statement;}
      break;
      }
    case FUNCTION:{
      statement = FD();
{if ("" != null) return statement;}
      break;
      }
    case LBRACE:{
      statement = B();
{if ("" != null) return statement;}
      break;
      }
    case RETURN:{
      statement = RS();
{if ("" != null) return statement;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Statement RS() throws ParseException {Expression expression;
    jj_consume_token(RETURN);
    expression = E();
{if ("" != null) return new ReturnStatement(expression);}
    throw new Error("Missing return statement in function");
  }

  final public Statement FD() throws ParseException {Token typeToken, idToken; Function function; ParameterList parameterList; Statement functionBody;
    jj_consume_token(FUNCTION);
    typeToken = jj_consume_token(TYPE);
    idToken = jj_consume_token(ID);
    jj_consume_token(LPAREN);
    parameterList = PL();
    jj_consume_token(RPAREN);
    functionBody = B();
{if ("" != null) return new Function(CodePosition.createFromToken(typeToken), typeToken.image, idToken.image,
            functionBody, parameterList);}
    throw new Error("Missing return statement in function");
  }

  final public FunctionCall FC() throws ParseException {Token idToken; ExpressionList expressionList;
    idToken = jj_consume_token(ID);
    jj_consume_token(LPAREN);
    expressionList = EL();
    jj_consume_token(RPAREN);
{if ("" != null) return new FunctionCall(idToken.image, expressionList);}
    throw new Error("Missing return statement in function");
  }

  final public ParameterList PL() throws ParseException {Token typeToken, idToken; Parameter parameter; ParameterList parameterList;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TYPE:{
      parameter = PM();
      parameterList = PLPrime();
{if ("" != null) return parameterList == null ? new LastParameterList(parameter) :
                new PairParameterList(parameter, parameterList);}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public ParameterList PLPrime() throws ParseException {Parameter parameter; ParameterList parameterList;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      parameter = PM();
      parameterList = PLPrime();
{if ("" != null) return parameterList == null ? new LastParameterList(parameter) : new PairParameterList(parameter, parameterList);}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Parameter PM() throws ParseException {Token typeToken, idToken;
    typeToken = jj_consume_token(TYPE);
    idToken = jj_consume_token(ID);
{if ("" != null) return new Parameter(CodePosition.createFromToken(typeToken), typeToken.image, idToken.image);}
    throw new Error("Missing return statement in function");
  }

  final public Statement B() throws ParseException {StatementList statementList;
    jj_consume_token(LBRACE);
    statementList = BPrime();
    jj_consume_token(RBRACE);
{if ("" != null) return new Block(statementList);}
    throw new Error("Missing return statement in function");
  }

  final public StatementList BPrime() throws ParseException {Statement statement; StatementList statementList;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRINT:
    case FOR:
    case FUNCTION:
    case IF:
    case RETURN:
    case TYPE:
    case WHILE:
    case LBRACE:
    case ID:{
      statement = S();
      jj_consume_token(SEMICOLON);
      statementList = BPrime();
{if ("" != null) return statementList == null ?
                new LastStatementList(statement) :
                new PairStatementList(statement, statementList);}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Statement WS() throws ParseException {Expression condition; Statement whileBody;
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    condition = E();
    jj_consume_token(RPAREN);
    whileBody = S();
{if ("" != null) return new WhileStatement(condition, whileBody);}
    throw new Error("Missing return statement in function");
  }

  final public Statement FS() throws ParseException {Statement initStatement; Expression condition; Statement incrStatement; Statement body;
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    initStatement = S();
    jj_consume_token(SEMICOLON);
    condition = E();
    jj_consume_token(SEMICOLON);
    incrStatement = S();
    jj_consume_token(RPAREN);
    body = S();
{if ("" != null) return new ForStatement(initStatement, condition, incrStatement, body);}
    throw new Error("Missing return statement in function");
  }

  final public Statement CS() throws ParseException {Expression condition; Statement thenStatement; Statement elseStatement;
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    condition = E();
    jj_consume_token(RPAREN);
    thenStatement = S();
    elseStatement = CSPrime();
{if ("" != null) return new ConditionalStatement(condition, thenStatement, elseStatement);}
    throw new Error("Missing return statement in function");
  }

  final public Statement CSPrime() throws ParseException {Statement statement;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      statement = S();
{if ("" != null) return statement;}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Statement DS() throws ParseException {Token typeToken, idToken; Expression expression;
    typeToken = jj_consume_token(TYPE);
    idToken = jj_consume_token(ID);
    expression = DSPrime();
{if ("" != null) return expression == null ?
            new DeclarationStatement(CodePosition.createFromToken(typeToken), typeToken.image, idToken.image) :
            new DeclarationStatement(typeToken.image, idToken.image, expression);}
    throw new Error("Missing return statement in function");
  }

  final public Expression DSPrime() throws ParseException {Expression expression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LET:{
      jj_consume_token(LET);
      expression = E();
{if ("" != null) return expression;}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Statement AS() throws ParseException {Statement statement; Token idToken; Expression expression;
    idToken = jj_consume_token(ID);
    jj_consume_token(LET);
    expression = E();
{if ("" != null) return new AssignmentStatement(idToken.image, expression);}
    throw new Error("Missing return statement in function");
  }

  final public Statement PS() throws ParseException {ExpressionList expressionList;
    jj_consume_token(PRINT);
    jj_consume_token(LPAREN);
    expressionList = EL();
    jj_consume_token(RPAREN);
{if ("" != null) return new PrintStatement(expressionList);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList EL() throws ParseException {Expression expression; ExpressionList expressionList;
    expression = E();
    expressionList = ELPrime();
{if ("" != null) return expressionList == null ? new LastExpressionList(expression.getCodePosition(), expression) :
            new PairExpressionList(expression.getCodePosition(), expression, expressionList);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList ELPrime() throws ParseException {Expression expression; ExpressionList expressionList;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      expression = E();
      expressionList = ELPrime();
{if ("" != null) return expressionList == null ? new LastExpressionList(expression.getCodePosition(), expression) :
            new PairExpressionList(expression, expressionList);}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression E() throws ParseException {Expression lhs, rhs;
    lhs = T8();
    rhs = EPrime(lhs);
{if ("" != null) return rhs == null ? lhs : rhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression EPrime(Expression lhs) throws ParseException {Expression rhs; Expression ePrimeExpression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OR:{
      jj_consume_token(OR);
      rhs = T8();
      ePrimeExpression = EPrime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.OR,
                ePrimeExpression != null ? ePrimeExpression : rhs );}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T8() throws ParseException {Expression lhs, rhs;
    lhs = T7();
    rhs = T8Prime(lhs);
{if ("" != null) return rhs == null ? lhs : rhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T8Prime(Expression lhs) throws ParseException {Expression rhs, t8PrimeExpression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
      rhs = T7();
      t8PrimeExpression = T8Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.AND,
                t8PrimeExpression != null ? t8PrimeExpression : rhs );}
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T7() throws ParseException {Expression lhs, rhs;
    lhs = T6();
    rhs = T7Prime(lhs);
{if ("" != null) return rhs != null ? rhs : lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T7Prime(Expression lhs) throws ParseException {Expression rhs, t7PrimeExpression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case XOR:{
      jj_consume_token(XOR);
      rhs = T6();
      t7PrimeExpression = T7Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.XOR,
                t7PrimeExpression != null ? t7PrimeExpression : rhs );}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T6() throws ParseException {Expression lhs, rhs;
    lhs = T5();
    rhs = T6Prime(lhs);
{if ("" != null) return rhs != null ? rhs : lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T6Prime(Expression lhs) throws ParseException {Expression rhs, t6PrimeExpression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQ:
    case NEQ:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        jj_consume_token(EQ);
        rhs = T5();
        t6PrimeExpression = T6Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.EQ,
                t6PrimeExpression != null ? t6PrimeExpression : rhs );}
        break;
        }
      case NEQ:{
        jj_consume_token(NEQ);
        rhs = T5();
        t6PrimeExpression = T6Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.NEQ,
                t6PrimeExpression != null ? t6PrimeExpression : rhs);}
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T5() throws ParseException {Expression lhs, rhs;
    lhs = T4();
    rhs = T5Prime(lhs);
{if ("" != null) return rhs != null ? rhs : lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T5Prime(Expression lhs) throws ParseException {Expression rhs, t5PrimeExpression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case GT:
    case GTE:
    case LT:
    case LTE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        jj_consume_token(LT);
        rhs = T4();
        t5PrimeExpression = T5Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.LT,
                t5PrimeExpression != null ? t5PrimeExpression : rhs );}
        break;
        }
      case LTE:{
        jj_consume_token(LTE);
        rhs = T4();
        t5PrimeExpression = T5Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.LTE,
                t5PrimeExpression != null ? t5PrimeExpression : rhs );}
        break;
        }
      case GT:{
        jj_consume_token(GT);
        rhs = T4();
        t5PrimeExpression = T5Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.GT,
                t5PrimeExpression != null ? t5PrimeExpression : rhs );}
        break;
        }
      case GTE:{
        jj_consume_token(GTE);
        rhs = T4();
        t5PrimeExpression = T5Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.GTE,
                t5PrimeExpression != null ? t5PrimeExpression : rhs );}
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T4() throws ParseException {Expression lhs, rhs;
    lhs = T3();
    rhs = T4Prime(lhs);
{if ("" != null) return rhs != null ? rhs : lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T4Prime(Expression lhs) throws ParseException {Expression rhs, t4PrimeExpression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MINUS:
    case PLUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        jj_consume_token(PLUS);
        rhs = T3();
        t4PrimeExpression = T4Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.PLUS,
                t4PrimeExpression != null ? t4PrimeExpression : rhs );}
        break;
        }
      case MINUS:{
        jj_consume_token(MINUS);
        rhs = T3();
        t4PrimeExpression = T4Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.MINUS,
                t4PrimeExpression != null ? t4PrimeExpression : rhs );}
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T3() throws ParseException {Expression lhs, rhs;
    lhs = T2();
    rhs = T3Prime(lhs);
{if ("" != null) return rhs != null ? rhs : lhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T3Prime(Expression lhs) throws ParseException {Expression rhs, t3PrimeExpression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DIV:
    case TIMES:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TIMES:{
        jj_consume_token(TIMES);
        rhs = T2();
        t3PrimeExpression = T3Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.TIMES,
                t3PrimeExpression != null ? t3PrimeExpression : rhs );}
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        rhs = T2();
        t3PrimeExpression = T3Prime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.DIV,
                t3PrimeExpression != null ? t3PrimeExpression : rhs );}
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T2() throws ParseException {Expression f;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case BOOL:
    case LPAREN:
    case NUM:
    case DEC:
    case TEXT:
    case ID:{
      f = F();
{if ("" != null) return f;}
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      f = F();
{if ("" != null) return new UnaryOperatorExpression(UnaryOperator.NOT, f);}
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression F() throws ParseException {Token valueToken; Expression expression; FunctionCall functionCall; ExpressionList expressionList;
    if (jj_2_1(2)) {
      functionCall = FC();
{if ("" != null) return functionCall;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        valueToken = jj_consume_token(ID);
{if ("" != null) return new IdExpression(CodePosition.createFromToken(valueToken), valueToken.image);}
        break;
        }
      case NUM:{
        valueToken = jj_consume_token(NUM);
{if ("" != null) return new NumExpression(CodePosition.createFromToken(valueToken), Integer.parseInt(valueToken.image));}
        break;
        }
      case DEC:{
        valueToken = jj_consume_token(DEC);
{if ("" != null) return new DecimalExpression(CodePosition.createFromToken(valueToken), Double.parseDouble(valueToken.image));}
        break;
        }
      case BOOL:{
        valueToken = jj_consume_token(BOOL);
{if ("" != null) return new BooleanExpression(CodePosition.createFromToken(valueToken), Boolean.parseBoolean(valueToken.image));}
        break;
        }
      case TEXT:{
        valueToken = jj_consume_token(TEXT);
{if ("" != null) return new TextExpression(CodePosition.createFromToken(valueToken), valueToken.image);}
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
        expression = E();
        jj_consume_token(RPAREN);
{if ("" != null) return expression;}
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_1()
 {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_1()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public OhAstParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[21];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x25200982,0x25200982,0x1000000,0x8000000,0x25200982,0x20,0x1000,0x8000000,0x80000,0x4,0x2000000,0x10040,0x10040,0xc600,0xc600,0x140000,0x140000,0x800010,0x800010,0x80022008,0x80002008,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4,0x4,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7,0x7,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public OhAstParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public OhAstParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new OhAstParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public OhAstParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new OhAstParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public OhAstParser(OhAstParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(OhAstParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 21; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 21; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
