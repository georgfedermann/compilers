/* V01AstParser.java */
/* Generated By:JavaCC: Do not edit this line. V01AstParser.java */
package org.poormanscastle.studies.compilers.grammar.grammar_v01.ast.parser.javacc;

import org.poormanscastle.studies.compilers.grammar.grammar_v01.ast.domain.*;

public class V01AstParser implements V01AstParserConstants {
    public static void main(String[] args) throws ParseException{
        V01AstParser parser = new V01AstParser(System.in);
        parser.P();
    }

  final public Program P() throws ParseException {Statement statement;
    StatementList statementList;
    statement = S();
    statementList = PPrime();
{if ("" != null) return new ProgramImpl(statement.getCodePosition(), statementList == null ? statement :
            new PairStatementList(statement.getCodePosition(), statement, statementList));}
    throw new Error("Missing return statement in function");
  }

  final public StatementList PPrime() throws ParseException {StatementList statementList;
    jj_consume_token(SEMICOLON);
    statementList = PPrimePrime();
{if ("" != null) return statementList;}
    throw new Error("Missing return statement in function");
  }

  final public StatementList PPrimePrime() throws ParseException {Statement statement; StatementList statementList;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PRINT:
    case ID:
    case TYPE:{
      statement = S();
      statementList = PPrime();
{if ("" != null) return statementList == null ?
                new LastStatementList(statement.getCodePosition(), statement) :
                new PairStatementList(statement.getCodePosition(), statement, statementList);}
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Statement S() throws ParseException {Statement statement;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TYPE:{
      statement = DS();
      break;
      }
    case ID:{
      statement = AS();
      break;
      }
    case PRINT:{
      statement = PS();
{if ("" != null) return statement;}
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Statement DS() throws ParseException {Token typeToken;
    Token idToken;
    Expression expression;
    typeToken = jj_consume_token(TYPE);
    idToken = jj_consume_token(ID);
    expression = DSPrime();
{if ("" != null) return expression == null ?
            new DeclarationStatement(new CodePosition(typeToken), typeToken.image, idToken.image) :
            new DeclarationStatement(typeToken.image, idToken.image, expression);}
    throw new Error("Missing return statement in function");
  }

  final public Expression DSPrime() throws ParseException {Expression expression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LET:{
      jj_consume_token(LET);
      expression = E();
{if ("" != null) return expression;}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Statement AS() throws ParseException {Statement statement; Token idToken; Expression expression;
    idToken = jj_consume_token(ID);
    jj_consume_token(LET);
    expression = E();
{if ("" != null) return new AssignmentStatement(idToken.image, expression);}
    throw new Error("Missing return statement in function");
  }

  final public Statement PS() throws ParseException {ExpressionList expressionList;
    jj_consume_token(PRINT);
    jj_consume_token(LPAREN);
    expressionList = EL();
    jj_consume_token(RPAREN);
{if ("" != null) return new PrintStatement(expressionList);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList EL() throws ParseException {Expression expression; ExpressionList expressionList;
    expression = E();
    expressionList = ELPrime();
{if ("" != null) return expressionList == null ? new LastExpressionList(expression.getCodePosition(), expression) :
            new PairExpressionList(expression.getCodePosition(), expression, expressionList);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList ELPrime() throws ParseException {Expression expression; ExpressionList expressionList;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      jj_consume_token(COMMA);
      expression = E();
      expressionList = ELPrime();
{if ("" != null) return expressionList == null ? new LastExpressionList(expression.getCodePosition(), expression) :
            new PairExpressionList(expression, expressionList);}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression E() throws ParseException {Expression lhs, rhs;
    lhs = T8();
    rhs = EPrime(lhs);
{if ("" != null) return rhs == null ? lhs : rhs;}
    throw new Error("Missing return statement in function");
  }

  final public Expression EPrime(Expression lhs) throws ParseException {Expression rhs; Expression ePrimeExpression; Token operatorToken;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OR:{
      operatorToken = jj_consume_token(OR);
      rhs = T8();
      ePrimeExpression = EPrime(rhs);
{if ("" != null) return new BinaryOperatorExpression(lhs, BinaryOperator.OR,
                ePrimeExpression != null ? ePrimeExpression : rhs );}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public Expression T8() throws ParseException {
{if ("" != null) return new BooleanExpression(null, Boolean.FALSE);}
    throw new Error("Missing return statement in function");
  }

  final public Expression F() throws ParseException {Token valueToken; Expression expression;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      valueToken = jj_consume_token(ID);
{if ("" != null) return new IdExpression(new CodePosition(valueToken), valueToken.image);}
      break;
      }
    case NUM:{
      valueToken = jj_consume_token(NUM);
{if ("" != null) return new NumExpression(new CodePosition(valueToken), Integer.parseInt(valueToken.image));}
      break;
      }
    case DEC:{
      valueToken = jj_consume_token(DEC);
{if ("" != null) return new DecimalExpression(new CodePosition(valueToken), Double.parseDouble(valueToken.image));}
      break;
      }
    case BOOL:{
      valueToken = jj_consume_token(BOOL);
{if ("" != null) return new BooleanExpression(new CodePosition(valueToken), Boolean.parseBoolean(valueToken.image));}
      break;
      }
    case TEXT:{
      valueToken = jj_consume_token(TEXT);
{if ("" != null) return new TextExpression(new CodePosition(valueToken), valueToken.image);}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public V01AstParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4200002,0x4200002,0x40000,0x80000,0x20000,0x3e00000,};
   }

  /** Constructor with InputStream. */
  public V01AstParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public V01AstParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new V01AstParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public V01AstParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new V01AstParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public V01AstParser(V01AstParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(V01AstParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
