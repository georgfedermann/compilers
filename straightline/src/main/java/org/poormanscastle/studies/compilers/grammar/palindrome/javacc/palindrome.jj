
options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Palindrome)
package org.poormanscastle.studies.compilers.grammar.palindrome.javacc;
public class Palindrome{
    public static void main(String[] args) throws ParseException{
        Palindrome palindrome = new Palindrome(System.in);
        palindrome.S();
    }
}
PARSER_END(Palindrome)

TOKEN : {
    < PAREN_L : "(" > |
    < PAREN_R : ")" > |
    < BRACKET_L : "[" > |
    < BRACKET_R : "]" > |
    < a : "a" > |
    < b : "b" > |
    < whitespace : (" " | "\n" | "\r" | "\t")* >
}

SKIP : {
    <whitespace>
}

void S() :
{}
{
    SPrime()<EOF>
}

void SPrime() :
{}
{
    // <a>SPrime()<a> | <b>SPrime()<b> | <a> | <b> | <whitespace>
    <a> | <b> | <whitespace>
}

