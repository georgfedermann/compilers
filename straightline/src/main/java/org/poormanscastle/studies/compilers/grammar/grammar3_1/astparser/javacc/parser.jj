
options {
    LOOKAHEAD = 1;
    CHOICE_AMBIGUITY_CHECK = 2;
    OTHER_AMBIGUITY_CHECK = 1;
    STATIC = false;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    ERROR_REPORTING = true;
    JAVA_UNICODE_ESCAPE = false;
    UNICODE_INPUT = false;
    IGNORE_CASE = false;
    USER_TOKEN_MANAGER = false;
    USER_CHAR_STREAM = false;
    BUILD_PARSER = true;
    BUILD_TOKEN_MANAGER = true;
    SANITY_CHECK = true;
    FORCE_LA_CHECK = false;
}

PARSER_BEGIN(AstParser)
package org.poormanscastle.studies.compilers.grammar.grammar3_1.astparser.javacc;

import org.poormanscastle.studies.compilers.grammar.grammar3_1.astparser.ast.*;

public class AstParser{
    public static void main(String[] args) throws ParseException{
        AstParser parser = new AstParser(System.in);
        parser.P();
    }
}
PARSER_END(AstParser)

/* language commandos */
TOKEN : {
    < PRINT : "print" >
}

/* Operators */
TOKEN : {
    < PLUS : "+" > |
    < MINUS : "-" > |
    < TIMES : "*" > |
    < DIV : "/" > |
    < ASSIGN : ":=" >
}

/* Separators */
TOKEN : {
    < LPAREN : "(" > |
    < RPAREN : ")" > |
    < COMMA : "," > |
    < SEMICOLON : ";" >
}

/* variable strings */
TOKEN : {
    < ID : [ "_", "a"-"z", "A"-"Z"](["_", "a"-"z", "A"-"Z"])* > |
    < NUM : (["1"-"9"])(["0"-"9"])* >
}

/* Whitespace */
SKIP : {
    " " |
    "\n" |
    "\r" |
    "\t"
}

void P() :
{}
{
    S() PPrime() <EOF>
}

void PPrime() :
{}
{
    <SEMICOLON> X()
}

void X() :
{}
{
    ( S() PPrime() )?
}

void S() :
{}
{
    <ID> <ASSIGN> E()
    |
    <PRINT> <LPAREN> L() <RPAREN>
}

void L() :
{}
{
    E() LPrime()
}

void LPrime() :
{}
{
    ( <COMMA> E() LPrime() )?
}

void E() :
{}
{
    T() EPrime()
    |
    <LPAREN> S() <COMMA> E() <RPAREN>
}

void EPrime() :
{}
{
    (
        <PLUS> T() EPrime()
        |
        <MINUS> T() EPrime()
    )?
}

void T() :
{}
{
    F() TPrime()
}

void TPrime() :
{}
{
    (
        <TIMES> F() TPrime()
        |
        <DIV> F() TPrime()
    )?
}

Expression F() :
{ Token token; }
{
    token = <NUM> { return new NumExpression(new CodePosition(token), Integer.parseInt(token.image)); }
    |
    token = <ID> { return new IdExpression(new CodePosition(token), token.image); }
}







